{"mappings":"AA0MA,MAAMA,EAAQC,SAASC,cAAc,QAC/BC,EAAYF,SAASC,cAAc,cAEzCF,EAAMI,iBAAiB,SAEvB,WACE,IAAIC,EAAU,EAEd,IAAIF,EAAUG,UAAUC,SAAQC,GAAQA,EAAIC,YAAc,KAE1D,MAAMC,EAAW,IAAIP,EAAUG,UAAUK,KAAI,CAACC,EAAGC,IA2B1C,IAAIC,SAAQ,CAACC,EAASC,KACZC,KAAKC,SACP,GACXH,EAAQ,KAENC,EAAK,IAAI,MA9BfF,QAAQK,WAAWT,GAAUU,MAAKC,IAChCC,QAAQC,IAAIF,GACZA,EAAMd,SAAQ,CAACiB,EAAMX,KACnBY,YAAW,KACW,cAAhBD,EAAKE,SACPrB,GAAW,GAEbiB,QAAQC,IAAIC,GACZrB,EAAUG,SAASO,GAAGJ,YAAce,EAAKG,OAASH,EAAKI,OAEnDzB,EAAUG,SAASuB,OAAS,IAAMhB,GACpCY,YAAW,KACLpB,IAAYF,EAAUG,SAASuB,QAAWxB,EAG5CyB,MAAM,cAFNA,MAAM,SAEa,GAEpB,IAAI,GAEJ,IAAJjB,EAAS,GACZ,G","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     const number = Math.random() < 0.6;\n//     if (number) {\n//       resolve('вуху все тру');\n//     }\n//     reject('ничего не тру');\n//   }, 1000);\n// });\n// promise.then(\n//     result => {\n//   console.log(`${result}`);\n//   return 6;\n// },\n// error => {\n//     console.log(`${error}`)\n//     return 10;\n// }).then((x)=>{\n//     console.log(x)\n// })\n\n// const isSuccess = true;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => {\n//     value;\n//   })\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n\n// console.log(promise)\n// // Will run first\n// console.log(\"Before promise.then()\");\n\n// // Registering promise callbacks\n// promise.then(\n//   // onResolve will run third or not at all\n//   value => {\n//     console.log(\"onResolve call inside promise.then()\");\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log(\"onReject call inside promise.then()\");\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n\n//       if (isSuccess) {\n//         resolve(\"success value\");\n//       } else {\n//         reject(\"error\");\n//       }\n//     }, 2000);\n//   });\n// };\n\n// fetchUserFromServer(\"Mango\")\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n//***************************** */\n\n// Мікро процеси мають більший пріорітет ніж макро\n\n// Мікро процеси\n// 1 Promise\n// 2 Observer\n\n// Макро процеси\n// 1 setTimeout\n// 2 setInterval\n// https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate\n// 3 setImmediate\n//https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n// 4 requestAnimationFrame\n//ПРИКЛАДИ*****\n// console.log('1')\n// setTimeout(() => {\n//   console.log('2')\n// }, 0);\n// Promise.resolve('3').then(value => console.log(value));\n// console.log('4') // 1, 4, 3, 2\n//****** */\n// console.log(\"1\");\n// setTimeout(() => console.log(\"2\"), 10);\n// Promise.resolve(\"3\").then((value) => console.log(value));\n// Promise.reject(\"4\").then((value) => console.log(value)).catch(err=>console.log(err));\n// Promise.resolve(\"5\").then((value) => console.log(value));\n// setTimeout(() => console.log(\"6\"), 0);\n// console.log(\"7\"); //1,7,3,5,4,2\n//*******************/\n\n// function createPromise(position, delay, step) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// const form = document.querySelector('.form');\n\n// form.addEventListener('submit', (event) => {\n//   event.preventDefault();\n\n//   const delay = parseInt(form.elements.delay.value);\n//   const step = parseInt(form.elements.step.value);\n//   const amount = parseInt(form.elements.amount.value);\n\n//   for (let i = 0; i < amount; i++) {\n//     createPromise(i, delay + step * i)\n//       .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// });\n\n//КАЗИНО ВАРІАНТ 1*******************************\n// *************************************************\n\n// const start = document.querySelector('.btn');\n// const container = document.querySelector('.container');\n\n// start.addEventListener('click', onStart);\n\n// function onStart() {\n//     const result = [];\n//   [...container.children].forEach((box) => (box.textContent = ''));\n//   [...container.children].forEach((box, i) => {\n//     createPromise(i)\n//       .then(smile => {\n//         box.textContent = smile;\n//         result.push('1')\n//       })\n//       .catch(smile => {\n//         box.textContent = smile;\n//       })\n//       .finally(() => {\n//        setTimeout(()=>{\n//         if(i === container.children.length-1) {\n//             if (!result.length || result.length === 3) {\n//                 alert ('Winner!')\n//             } else {\n//                 alert ('try again(')\n//             }\n//         }\n//        }, 500)\n//       });\n//   });\n// }\n\n// function createPromise(delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const random = Math.random();\n//       if (random > 0.7) {\n//         resolve('✅');\n//       } else {\n//         reject('❌');\n//       }\n//     }, 1000 * delay);\n//   });\n// }\n\n//КАЗИНО ВАРІАНТ 2*******************************\n// *************************************************\n\nconst start = document.querySelector('.btn');\nconst container = document.querySelector('.container');\n\nstart.addEventListener('click', onStart);\n\nfunction onStart() {\n  let counter = 0;\n\n  [...container.children].forEach(box => (box.textContent = ''));\n\n  const promises = [...container.children].map((_, i) => createPromise(i));\n\n  Promise.allSettled(promises).then(items => {\n    console.log(items);\n    items.forEach((item, i) => {\n      setTimeout(() => {\n        if (item.status === 'fulfilled') {\n          counter += 1;\n        }\n        console.log(item);\n        container.children[i].textContent = item.value || item.reason;\n\n        if (container.children.length - 1 === i) {\n          setTimeout(() => {\n            if (counter === container.children.length || !counter) {\n              alert('Winner');\n            } else {\n              alert('Lost money');\n            }\n          }, 500);\n        }\n      }, i * 1000);\n    });\n  });\n}\n\nfunction createPromise() {\n  return new Promise((resolve, reject) => {\n    const random = Math.random();\n    if (random > 0.7) {\n      resolve('✅');\n    } else {\n      reject('❌');\n    }\n  });\n}\n"],"names":["$47d4ff9957288465$var$start","document","querySelector","$47d4ff9957288465$var$container","addEventListener","counter","children","forEach","box","textContent","promises","map","_","i","Promise","resolve","reject","Math","random","allSettled","then","items","console","log","item","setTimeout","status","value","reason","length","alert"],"version":3,"file":"03-promises.022737b9.js.map"}